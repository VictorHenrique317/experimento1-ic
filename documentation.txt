
gerando o tensor unico -> gennsets "32 32 32" sizes.gennsets dataset.tensor
adicionando noise -> cat dataset.tensor | num-noise "50 50 50" [correct-obs] [incorrect-obs] > [output_file]

O script gera multiplos fuzzy tensors com diferentes niveis de ruido baseado nas configurações setadas no configs.json,
Cada arquivo com um tensor fuzzy tem o seu nome no formato dataset-co{observation}.fuzzy_tensor, 
onde {observation} é o numero de observações corretas ("-co").

Cada iteração gera os mesmos arquivos .paf e .multidupehack com a intenção de medir a média do tempo gasto

Para cada um desses arquivos ele roda o multidupehack com diferentes valores de -e e um valor de -s fixo, ambos setados no arquivo configs.json.
Cada arquivo com um output de multidupehack tem seu nome no formato -t{time}-co{correct_observations}-e{epsilon}-s{size}.multidupehack
onde {time} é o tempo de execução em segundos de multidupehack. Arquivos ja analisados pelo multidupehack são pulados.

Para cada arquivo .multidupehack um .paf correspondente é criado






